import requests
import logging
import asyncio
import sys
import re
from typing import Union, NoReturn
from packaging import version as ver

from aiogram import Bot, Dispatcher
from aiogram.exceptions import TelegramAPIError, TelegramUnauthorizedError
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from pyrogram import Client

from .events import Events
from .token_manager import TokenManager
from ..db import db
from .. import types, __version__, __get_version_url__, __get_commits_url__


class BotManager(Events, TokenManager):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞"""

    CRITICAL_KEYWORDS = [
        "security", "critical", "fix", "hotfix", 
        "urgent", "–≤–∞–∂–Ω–æ", "–∫—Ä–∏—Ç–∏—á–Ω–æ", "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
        "—É—è–∑–≤–∏–º–æ—Å—Ç—å", "vulnerability", "—Ñ–∏–∫—Å"
    ]

    def __init__(self, app: Client, db: db, all_modules: types.ModulesManager) -> None:
        self._app = app
        self._db = db
        self._all_modules = all_modules
        self._token = self._db.get("xioca.bot", "token", None)

    async def load(self) -> Union[bool, NoReturn]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞"""
        logging.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞...")
        error_text = "–Æ–∑–µ—Ä–±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º –±–æ—Ç. –†–µ—à–∏ –ø—Ä–æ–±–ª–µ–º—É —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–π —é–∑–µ—Ä–±–æ—Ç –∑–∞–Ω–æ–≤–æ"

        if not self._token:
            self._token = await self._create_bot()
            if self._token is False:
                logging.error(error_text)
                return sys.exit(1)
            self._db.set("xioca.bot", "token", self._token)

        try:
            self.bot = Bot(token=self._token, default=DefaultBotProperties(parse_mode='html'))
        except (TelegramAPIError, TelegramUnauthorizedError):
            logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω...")
            result = await self._revoke_token()
            if not result:
                self._token = await self._create_bot()
                if not self._token:
                    logging.error(error_text)
                    return sys.exit(1)
                self._db.set("xioca.bot", "token", self._token)
                return await self.load()

        self._dp = Dispatcher()
        self._dp.message.register(self._message_handler)
        self._dp.inline_query.register(self._inline_handler)
        self._dp.callback_query.register(self._callback_handler)
        asyncio.create_task(self._dp.start_polling(self.bot))
        self.bot.manager = self
        
        bot_info = await self.bot.get_me()
        await self._app.unblock_user(bot_info.username)
        m = await self._app.send_message(bot_info.id, "/start")
        await m.delete()
        
        if not self._db.get("xioca.loader", "start", False):
            await self._send_start_message()
        
        await self._check_for_updates()
        
        logging.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        return True

    async def _send_start_message(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            b = InlineKeyboardButton(text="Xioca UB", url="https://t.me/XiocaUB")
            kb = InlineKeyboardBuilder()
            kb.row(b)
            await self.bot.send_message(
                self._all_modules.me.id,
                """üåô <b>Xioca —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ!
                
‚Ñπ –ë—ã—Å—Ç—Ä—ã–π –≥–∞–π–¥ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>
<code>.help</code> - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
<code>.help</code> [–∫–æ–º–∞–Ω–¥–∞ / –º–æ–¥—É–ª—å] - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.
<code>.loadmod</code> [–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–∞–π–ª] - –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –∏–∑ —Ñ–∞–π–ª–∞.
<code>.unloadmod</code> [–º–æ–¥—É–ª—å] - –í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å.
<code>.ping</code> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç.
<code>.restart</code> - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.
<code>.update</code> - –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞.
<code>.logs</code> - –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞.
<code>.terminal</code> [–∫–æ–º–∞–Ω–¥–∞] - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É.

‚≠ê <i><b>–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ</b></i>""",
                reply_markup=kb.as_markup()
            )
            self._db.set("xioca.loader", "start", True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def _is_critical_update(self, commit_message: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º"""
        commit_message_lower = commit_message.lower()
        return any(
            keyword in commit_message_lower
            for keyword in self.CRITICAL_KEYWORDS
        )

    async def _check_for_updates(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            r = requests.get(__get_version_url__)
            match = re.search(r"__version__\s*=\s*['\"]([^'\"]+)['\"]", r.text)
            if not match:
                return

            version = match.group(1)
            if ver.parse(str(version)) == ver.parse(str(__version__)):
            	return

            response = requests.get(__get_commits_url__, params={"per_page": 1})
            response.raise_for_status()
            commits = response.json()

            if not commits:
                changes = ["‚Ñπ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"]
                is_critical = False
            else:
                commit = commits[0]
                commit_sha = commit["sha"]
                commit_message = commit["commit"]["message"].split("\n")[0]
                is_critical = self._is_critical_update(commit_message)
                
                commit_url = f"{__get_commits_url__}/{commit_sha}"
                files_response = requests.get(commit_url)
                files_response.raise_for_status()
                commit_data = files_response.json()
                
                files = [f["filename"] for f in commit_data.get("files", [])]
                changes = [
                    f"üìå <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ <code>{commit_sha[:7]}</code>:</b>",
                    f"üí¨ <code>{commit_message}</code>"
                ]
                
                if files:
                    changes.append("üìÇ <b>–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</b>")
                    changes.extend(f"  - <code>{file}</code>" for file in files[:5])
                    if len(files) > 5:
                        changes.append(f"  ... –∏ –µ—â—ë {len(files)-5} —Ñ–∞–π–ª–æ–≤")

            update_header = (
                "üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï!</b>\n"
                if is_critical else 
                "üîî <b>–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è!</b>"
            )
            chg = "\n".join(changes)
            await self.bot.send_message(self._all_modules.me.id, f"""{update_header}
–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: <code>{__version__}</code>
–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: <code>{version}</code>

{chg}

üîÑ –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π <code>.update</code>""")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}") 