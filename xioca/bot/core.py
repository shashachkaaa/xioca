import logging
import asyncio
import sys

from aiogram import Bot, Dispatcher
from aiogram.exceptions import TelegramAPIError, TelegramUnauthorizedError
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from pyrogram import Client

from typing import Union, NoReturn

from .events import Events
from .token_manager import TokenManager
from ..db import db
from .. import types, __version__


class BotManager(
    Events,
    TokenManager
):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞"""

    def __init__(
        self,
        app: Client,
        db: db,
        all_modules: types.ModulesManager
    ) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            app (``pyrogram.Client``):
                –ö–ª–∏–µ–Ω—Ç

            db (``database.Database``):
                –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

            all_modules (``loader.Modules``):
                –ú–æ–¥—É–ª–∏
        """
        self._app = app
        self._db = db
        self._all_modules = all_modules

        self._token = self._db.get("xioca.bot", "token", None)

    async def load(self) -> Union[bool, NoReturn]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞"""
        logging.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞...")
        error_text = "–Æ–∑–µ—Ä–±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º –±–æ—Ç. –†–µ—à–∏ –ø—Ä–æ–±–ª–µ–º—É —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–π —é–∑–µ—Ä–±–æ—Ç –∑–∞–Ω–æ–≤–æ"

        if not self._token:
            self._token = await self._create_bot()
            if self._token is False:
                logging.error(error_text)
                return sys.exit(1)

            self._db.set("xioca.bot", "token", self._token)

        try:
            self.bot = Bot(token=self._token, default=DefaultBotProperties(parse_mode='html'))
        except (TelegramAPIError, TelegramUnauthorizedError):
            logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω...")
            result = await self._revoke_token()
            if not result:
                self._token = await self._create_bot()
                if not self._token:
                    logging.error(error_text)
                    return sys.exit(1)

                self._db.set("xioca.bot", "token", self._token)
                return await self.load()

        self._dp = Dispatcher()

        self._dp.message.register(self._message_handler)
        self._dp.inline_query.register(self._inline_handler)
        self._dp.callback_query.register(self._callback_handler)

        asyncio.create_task(self._dp.start_polling(self.bot))

        self.bot.manager = self
        
        bot_info = await self.bot.get_me()
        
        await self._app.unblock_user(bot_info.username)
        m = await self._app.send_message(bot_info.id, f"/start")
        await m.delete()
        	
        start = self._db.get("xioca.loader", "start", False)
        if not start:
        	try:
        		b = InlineKeyboardButton(text="Xioca UB", url="https://t.me/XiocaUB")
        		kb = InlineKeyboardBuilder()
        		kb.row(b)
        		await self.bot.send_message(self._all_modules.me.id, """üåô <b>Xioca —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ!
        	
‚Ñπ –ë—ã—Å—Ç—Ä—ã–π –≥–∞–π–¥ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>
<code>.help</code> - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
<code>.help</code> [–∫–æ–º–∞–Ω–¥–∞ / –º–æ–¥—É–ª—å] - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.
<code>.loadmod</code> [–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–∞–π–ª] - –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –∏–∑ —Ñ–∞–π–ª–∞.
<code>.unloadmod</code> [–º–æ–¥—É–ª—å] - –í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å.
<code>.ping</code> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç.
<code>.restart</code> - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.
<code>.update</code> - –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞.
<code>.logs</code> - –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞.
<code>.terminal</code> [–∫–æ–º–∞–Ω–¥–∞] - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É.

‚≠ê <i><b>–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ</b></i>""", reply_markup=kb.as_markup())
        		self._db.set("xioca.loader", "start", True)
        	except Exception as e:
        		logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        logging.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        return True