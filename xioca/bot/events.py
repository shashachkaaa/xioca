#    Sh1t-UB (telegram userbot by sh1tn3t)
#    Copyright (C) 2021-2022 Sh1tN3t

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

import logging
import inspect

from aiogram.types import (
    Message,
    CallbackQuery,
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent
)

from .types import Item
from .. import utils


class Events(Item):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π"""

    async def _message_handler(self, message: Message) -> Message:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        for func in self._all_modules.message_handlers.values():
            if not await self._check_filters(func, func.__self__, message):
                continue

            try:
                await func(self._app, message)
            except Exception as error:
                logging.exception(error)

        return message

    async def _callback_handler(self, call: CallbackQuery) -> CallbackQuery:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª–ª–±–µ–∫-—Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
        for func in self._all_modules.callback_handlers.values():
            if not await self._check_filters(func, func.__self__, call):
                continue

            try:
                await func(self._app, call)
            except Exception as error:
                logging.exception(error)

        return call

    async def _inline_handler(self, inline_query: InlineQuery) -> InlineQuery:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-—Ö–µ–Ω–¥–µ—Ä–æ–≤"""
        ids = self._db.get("xioca.loader", "allow", [])
        if inline_query.from_user.id != self._all_modules.me.id:
            if inline_query.from_user.id not in ids:
            	return await inline_query.answer(
                	[
                    	InlineQueryResultArticle(
                        	id=utils.random_id(),
                        	title="üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
                        	input_message_content=InputTextMessageContent(
                            	message_text=(
	                                "üòé –≠—Ç–æ - <code>Xioca</code>. –û—Ç–ª–∏—á–Ω—ã–π —é–∑–µ—Ä–±–æ—Ç —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–º–∞–Ω–¥ –∏ –º–æ–¥—É–ª–µ–π –∫ –Ω–µ–º—É.\n\n"
                                "‚ùì 	<b>–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?</b>\n"
                                	"–î–ª—è <b>—É—Å—Ç–∞–Ω–æ–≤–∫–∏</b> –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å <a href='https://xioca.live'>—Å–∞–π—Ç–æ–º</a>.\n\n"
                                	"üåü <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
                                	"- –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã.\n"
                                	"- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞.\n"
                                	"- –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.\n"
                                	"- –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞.\n\n"
                                	"üìö <b>–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:</b>\n"
                                	"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ <a href='https://github.com/shashachkaaa/Xioca'>–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏</a>.\n\n"
                                	"üõ† <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n"
                                	"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ <a href='https://t.me/XiocaUB'>—á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</a>."
                            	),
                            	parse_mode="HTML",
                            	disable_web_page_preview=True
                        	),
                        	description="–£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ Xioca –∏ –∫–∞–∫ –µ–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.",
                        	thumb_url="https://api.fl1yd.su/emoji/1f6ab.png"
                    	)
                	], cache_time=0
            	)

        if not (query := inline_query.query):
            commands = ""
            for command, func in self._all_modules.inline_handlers.items():
                if await self._check_filters(func, func.__self__, inline_query):
                    commands += f"\nüí¨ <code>@{(await self.bot.me()).username} {command}</code>"

            message = InputTextMessageContent(
                message_text=f"üëá <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>\n{commands}",
                parse_mode="HTML"
            )

            return await inline_query.answer(
                [
                    InlineQueryResultArticle(
                        id=utils.random_id(),
                        title="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
                        input_message_content=message,
                        thumb_url="https://api.fl1yd.su/emoji/1f4ac.png",
                    )
                ], cache_time=0
            )

        query_ = query.split()

        cmd = query_[0]
        args = " ".join(query_[1:])

        func = self._all_modules.inline_handlers.get(cmd)
        if not func:
            return await inline_query.answer(
                [
                    InlineQueryResultArticle(
                        id=utils.random_id(),
                        title="–û—à–∏–±–∫–∞",
                        input_message_content=InputTextMessageContent(
                            message_text="‚ùå –¢–∞–∫–æ–π –∏–Ω–ª–∞–π–Ω-–∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç"
                        ),
                        thumb_url="https://api.fl1yd.su/emoji/274c.png"
                    )
                ], cache_time=0
            )

        if not await self._check_filters(func, func.__self__, inline_query):
            return

        try:
            if (
                len(vars_ := inspect.getfullargspec(func).args) > 3
                and vars_[3] == "args"
            ):
                await func(self._app, inline_query, args)
            else:
                await func(self._app, inline_query)
        except Exception as error:
            logging.exception(error)

        return inline_query