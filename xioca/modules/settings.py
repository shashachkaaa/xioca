#    Sh1t-UB (telegram userbot by sh1tn3t)
#    Copyright (C) 2021-2022 Sh1tN3t

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

import random
import asyncio
import logging
import re

from aiogram.types import (
    InlineQuery,
    InputTextMessageContent,
    InlineQueryResultArticle,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from loguru import logger

from pyrogram import Client, types
from .. import loader, utils, fsm
from ..db import db

def kb(id):
	b1 = InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"giveaccess_{id}")
	b2 = InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_{id}")
	kb = InlineKeyboardBuilder()
	kb.row(b1, b2)
	
	return kb.as_markup()

@loader.module(author="sh1tn3t | shashachkaaa")
class SettingsMod(loader.Module):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    
    def __init__(self):
    	self.db = db

    async def setprefix_cmd(self, app: Client, message: types.Message, args: str):
        """–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å, –º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: setprefix <–ø—Ä–µ—Ñ–∏–∫—Å> [–ø—Ä–µ—Ñ–∏–∫—Å, ...]"""
        if not (args := args.split()):
            return await utils.answer(
                message, "<emoji id=5436113877181941026>‚ùì</emoji> <b>–ù–∞ –∫–∞–∫–æ–π –ø—Ä–µ—Ñ–∏–∫—Å –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å?</b>")

        self.db.set("xioca.loader", "prefixes", list(set(args)))
        prefixes = ", ".join(f"<code>{prefix}</code>" for prefix in args)
        return await utils.answer(
            message, f"<emoji id=5206607081334906820>‚úîÔ∏è</emoji> <b>–ü—Ä–µ—Ñ–∏–∫—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞</b> ¬´{prefixes}¬ª")

    async def addalias_cmd(self, app: Client, message: types.Message, args: str):
        """–î–æ–±–∞–≤–∏—Ç—å –∞–ª–∏–∞—Å. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: addalias <–Ω–æ–≤—ã–π –∞–ª–∏–∞—Å> <–∫–æ–º–∞–Ω–¥–∞>"""
        if not (args := args.lower().split(maxsplit=1)):
            return await utils.answer(
                message, "<emoji id=5436113877181941026>‚ùì</emoji> <b>–ö–∞–∫–æ–π –∞–ª–∏–∞—Å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å?</b>")

        if len(args) != 2:
            return await utils.answer(
                message, "<emoji id=5210952531676504517>‚ùå</emoji> <b>–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã."
                         "<emoji id=5206607081334906820>‚úîÔ∏è</emoji> <b>–ü—Ä–∏–º–µ—Ä:</b> <code>addalias</code> (–Ω–æ–≤—ã–π –∞–ª–∏–∞—Å) (–∫–æ–º–∞–Ω–¥–∞)"
            )

        aliases = self.all_modules.aliases
        if args[0] in aliases:
            return await utils.answer(
                message, "<emoji id=5210952531676504517>‚ùå</emoji> <b>–¢–∞–∫–æ–π –∞–ª–∏–∞—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>")

        if not self.all_modules.command_handlers.get(args[1]):
            return await utils.answer(
                message, "<emoji id=5210952531676504517>‚ùå</emoji> <b>–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç</b>")

        aliases[args[0]] = args[1]
        self.db.set("xioca.loader", "aliases", aliases)

        return await utils.answer(
            message, f"<emoji id=5206607081334906820>‚úîÔ∏è</emoji> <b>–ê–ª–∏–∞—Å</b> ¬´<code>{args[0]}</code>¬ª <b>–¥–ª—è –∫–æ–º–∞–Ω–¥—ã</b> ¬´<code>{args[1]}</code>¬ª <b>–±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω</b>")

    async def delalias_cmd(self, app: Client, message: types.Message, args: str):
        """–£–¥–∞–ª–∏—Ç—å –∞–ª–∏–∞—Å. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: delalias <–∞–ª–∏–∞—Å>"""
        if not (args := args.lower()):
            return await utils.answer(
                message, "<emoji id=5210952531676504517>‚ùå</emoji> <b>–ö–∞–∫–æ–π –∞–ª–∏–∞—Å –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å?</b>")

        aliases = self.all_modules.aliases
        if args not in aliases:
            return await utils.answer(
                message, "<emoji id=5210952531676504517>‚ùå</emoji> <b>–¢–∞–∫–æ–≥–æ –∞–ª–∏–∞—Å–∞ –Ω–µ—Ç</b>")

        del aliases[args]
        self.db.set("xioca.loader", "aliases", aliases)

        return await utils.answer(
            message, f"<emoji id=5206607081334906820>‚úîÔ∏è</emoji> <b>–ê–ª–∏–∞—Å</b> ¬´<code>{args}</code>¬ª <b>–±—ã–ª —É–¥–∞–ª–µ–Ω</b>")

    async def aliases_cmd(self, app: Client, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–ª–∏–∞—Å—ã"""
        aliases = self.all_modules.aliases
        if not aliases:
            return await utils.answer(
                message, "<emoji id=5463044060862244442>ü§∑‚Äç‚ôÇ</emoji> <b>–ê–ª–∏–∞—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>")

        return await utils.answer(
            message, "<emoji id=5956561916573782596>üìÑ</emoji> <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–ª–∏–∞—Å–æ–≤:</b>\n" + "\n".join(
                f"<emoji id=4972281662894244560>üõë</emoji> <code>{alias}</code> ‚ûú <code>{command}</code>"
                for alias, command in aliases.items()
            )
        )

    async def hidemod_cmd(self, app: Client, message: types.Message, args: str):
        """–°–∫—Ä—ã—Ç—å –º–æ–¥—É–ª—å. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: hidemod <–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è>"""
        if not args:
            return await utils.answer(
                message, "<emoji id=5436113877181941026>‚ùì</emoji> <b>–ö–∞–∫–æ–π –º–æ–¥—É–ª—å –Ω—É–∂–Ω–æ —Å–∫—Ä—ã—Ç—å?</b>"
            )

        module_name = args.lower()
        hide_mods = self.db.get("help", "hide_mods", [])
        
        all_modules = [module.name.lower() for module in self.all_modules.modules]
        
        module_name, text = utils.find_closest_module_name(module_name, all_modules)
        
        if module_name in hide_mods:
            return await utils.answer(
                message, f"<emoji id=5210952531676504517>‚ùå</emoji> <b>–ú–æ–¥—É–ª—å</b> ¬´<code>{module_name}</code>¬ª <b>—É–∂–µ —Å–∫—Ä—ã—Ç</b>\n\n{text}"
            )

        hide_mods.append(module_name)
        self.db.set("help", "hide_mods", hide_mods)

        return await utils.answer(
            message, f"<emoji id=5206607081334906820>‚úîÔ∏è</emoji> <b>–ú–æ–¥—É–ª—å</b> ¬´<code>{module_name}</code>¬ª <b>—Å–∫—Ä—ã—Ç</b>\n\n{text}"
        )

    async def showmod_cmd(self, app: Client, message: types.Message, args: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∫—Ä—ã—Ç—ã–π –º–æ–¥—É–ª—å. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: showmod <–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è>"""
        if not args:
            return await utils.answer(
                message, "<emoji id=5436113877181941026>‚ùì</emoji> <b>–ö–∞–∫–æ–π –º–æ–¥—É–ª—å –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å?</b>"
            )

        module_name = args.lower()
        hide_mods = self.db.get("help", "hide_mods", [])
        
        all_modules = [module.name.lower() for module in self.all_modules.modules]
        
        module_name, text = utils.find_closest_module_name(module_name, all_modules)
        
        if module_name not in hide_mods:
            return await utils.answer(
                message, f"<emoji id=5210952531676504517>‚ùå</emoji> <b>–ú–æ–¥—É–ª—å</b> ¬´<code>{module_name}</code>¬ª <b>–Ω–µ —Å–∫—Ä—ã—Ç</b>\n\n{text}"
            )

        hide_mods.remove(module_name)
        self.db.set("help", "hide_mods", hide_mods)

        return await utils.answer(
            message, f"<emoji id=5206607081334906820>‚úîÔ∏è</emoji> <b>–ú–æ–¥—É–ª—å</b> ¬´<code>{module_name}</code>¬ª <b>—Ç–µ–ø–µ—Ä—å –≤–∏–¥–µ–Ω</b>\n\n{text}"
        )

    async def hiddenmods_cmd(self, app: Client, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫—Ä—ã—Ç—ã—Ö –º–æ–¥—É–ª–µ–π. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: hiddenmods"""
        hide_mods = self.db.get("help", "hide_mods", [])
        
        if not hide_mods:
            return await utils.answer(
                message, "<emoji id=5463044060862244442>ü§∑‚Äç‚ôÇ</emoji> <b>–°–∫—Ä—ã—Ç—ã—Ö –º–æ–¥—É–ª–µ–π –Ω–µ—Ç</b>"
            )

        return await utils.answer(
            message, "<emoji id=5956561916573782596>üìÑ</emoji> <b>–°–ø–∏—Å–æ–∫ —Å–∫—Ä—ã—Ç—ã—Ö –º–æ–¥—É–ª–µ–π:</b>\n" + "\n".join(
                f"<emoji id=4972281662894244560>üõë</emoji> <code>{module}</code>"
                for module in hide_mods
            )
        )

    async def setinline_cmd(self, app: Client, message: types.Message, args):
    	"""–°–º–µ–Ω–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –∏–Ω–ª–∞–π–Ω –±–æ—Ç–∞"""
    	
    	if not args:
    		return await utils.answer(message, "<emoji id=5436113877181941026>‚ùì</emoji> <b>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –±–æ—Ç–∞.</b>")
    	name = args.strip().lower()
    	if not re.match(r"^[a-zA-Z0-9_]{5,}bot$", name):
    		return await utils.answer(message, "<emoji id=5210952531676504517>‚ùå</emoji> <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º. –Æ–∑–µ—Ä–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, –∏–º–µ—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ ¬´Bot¬ª –∏ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤.</b>")
    	
    	await utils.answer(message, "<emoji id=5195083327597456039>üåô</emoji> <b>–°–æ–∑–¥–∞—é –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞...</b>")
    	
    	async with fsm.Conversation(app, "@BotFather", True) as conv:
    		try:
    			await conv.ask("/cancel")
    		except errors.UserIsBlocked:
    			await app.unblock_user("@BotFather")
    		
    		await conv.get_response()
    		await asyncio.sleep(5)
    		
    		await conv.ask("/newbot")
    		response = await conv.get_response()
    		
    		if not all(phrase not in response.text for phrase in ["That I cannot do.", "Sorry"]):
    			return await utils.answer(message, f"<emoji id=5210952531676504517>‚ùå</emoji> <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞. –û—Ç–≤–µ—Ç @BotFather:</b> <code>{response.text}</code>")
    		await asyncio.sleep(5)
    		
    		await utils.answer(message, "<emoji id=5195083327597456039>üåô</emoji> <b>–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –∏–º—è –±–æ—Ç–∞...</b>")
    		await conv.ask(f"Xioca of {utils.get_display_name(self.all_modules.me)[:45]}")
    		await conv.get_response()
    		await asyncio.sleep(5)
    		
    		await conv.ask(args)
    		response = await conv.get_response()
    		
    		search = re.search(r"(?<=<code>)(.*?)(?=</code>)", response.text.html)
    		if not search:
    			return await utils.answer(message, "<emoji id=5210952531676504517>‚ùå</emoji> <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞. –û—Ç–≤–µ—Ç @BotFather:</b> <code>{response.text}</code>")
    		
    		token = search.group(0)
    		
    		await utils.answer(message, "<emoji id=5195083327597456039>üåô</emoji> <b>–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –∞–≤–∞—Ç–∞—Ä–∫—É –±–æ—Ç–∞...</b>")
    		await conv.ask("/setuserpic")
    		await conv.get_response()
    		await asyncio.sleep(5)
    		
    		await conv.ask("@" + args)
    		await conv.get_response()
    		await asyncio.sleep(5)
    		
    		await conv.ask_media(random.choice(["bot_avatar1.png", "bot_avatar2.png", "bot_avatar3.png"]), media_type="photo")
    		await conv.get_response()
    		await asyncio.sleep(5)
    		
    		await utils.answer(message, "<emoji id=5195083327597456039>üåô</emoji> <b>–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –∏–Ω–ª–∞–π–Ω...</b>")
    		await conv.ask("/setinline")
    		await conv.get_response()
    		await asyncio.sleep(5)
    		
    		await utils.answer(message, "<emoji id=5195083327597456039>üåô</emoji> <b>–û–±–Ω–æ–≤–ª—è—é —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞...</b>")
    		await conv.ask("@" + args)
    		await conv.get_response()
    		await asyncio.sleep(5)
    		
    		await utils.answer(message, "<emoji id=5195083327597456039>üåô</emoji> <b>–°–Ω–æ–≤–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é –∏–Ω–ª–∞–π–Ω...</b>")
    		await conv.ask("xioca  –∫–æ–º–∞–Ω–¥–∞")
    		await conv.get_response()
    		
    		logger.success("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
    		
    		self.db.set("xioca.bot", "token", token)
    		await utils.answer(message, f"<emoji id=5206607081334906820>‚úîÔ∏è</emoji> <b>–ò–Ω–ª–∞–π–Ω –±–æ—Ç <code>@{name}</code> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π</b>")
    	
    
    async def ownerlist_cmd(self, app: Client, message: types.Message):
    	"""–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏–º–µ—é—â–∏—Ö –¥–æ—Å—Ç—É–ø –∫ —é–∑–µ—Ä–±–æ—Ç—É"""
    	
    	ids = self.db.get("xioca.loader", "allow", [])
    	
    	if not ids:
    		return await utils.answer(message, f"<emoji id=5210956306952758910>üëÄ</emoji> <b>–ù–∏–∫—Ç–æ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É —é–∑–µ—Ä–±–æ—Ç—É!</b>")
    	
    	make = str.maketrans({
    		'1': '<emoji id=5381828389663431280>1Ô∏è‚É£</emoji>',
    		'2': '<emoji id=5382051178207007027>2Ô∏è‚É£</emoji>',
    		'3': '<emoji id=5379910025340802255>3Ô∏è‚É£</emoji>',
    		'4': '<emoji id=5388624247696412237>4Ô∏è‚É£</emoji>',
    		'5': '<emoji id=5390859675094766802>5Ô∏è‚É£</emoji>',
    		'6': '<emoji id=5388691197646625260>6Ô∏è‚É£</emoji>',
    		'7': '<emoji id=5391035158868547187>7Ô∏è‚É£</emoji>',
    		'8': '<emoji id=5388710159927236114>8Ô∏è‚É£</emoji>',
    		'9': '<emoji id=5391071623140889606>9Ô∏è‚É£</emoji>',
    		'0': '<emoji id=5381817669425058178>0Ô∏è‚É£</emoji>'
    	})
    	
    	text = ""
    	num = 0
    	
    	for id in ids:
    		num += 1
    		try:
    			name = (await app.get_users(id)).first_name
    		except:
    			name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    		
    		text += f"{num} <a href='tg://user?id={id}'>{name}</a>\n"
    	
    	text = text.translate(make)
    	
    	await utils.answer(message, f"<emoji id=5251203410396458957>üõ°</emoji> <b>–í—Å–µ–≥–æ <code>{num}</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É —é–∑–µ—Ä–±–æ—Ç—É</b>\n\n{text}")
    
    async def ownerrm_cmd(self, app: Client, message: types.Message, args: str):
    	"""–û—Ç–Ω—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ —é–∑–µ—Ä–±–æ—Ç—É"""
    	r = message.reply_to_message
    	
    	if not r:
    		if not args:
    			return await utils.answer(message, f"<emoji id=5210952531676504517>‚ùå</emoji> <b>–ù–µ–æ–±—Ö–æ–¥–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, ID –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>")
    		else:
    			args = args.split()
    			if isinstance(args[0], str):
    				id = args[0].replace("@", "")
    				id = (await app.get_users(id)).id
    				name = (await app.get_users(id)).first_name
    			else:
    				id = int(args[0])
    				name = (await app.get_users(id)).first_name
    	else:
    		id = r.from_user.id
    		name = r.from_user.first_name
    	
    	if self.all_modules.me.id == id:
    		return await utils.answer(message, "<emoji id=5210952531676504517>‚ùå</emoji> <b>–î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ —Å–∞–º–æ–º —Å–µ–±–µ!</b>")
    	
    	ids = self.db.get("xioca.loader", "allow", [])
    	if id not in ids:
    		return await utils.answer(message, f"<emoji id=5210952531676504517>‚ùå</emoji> <b>–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —é–∑–µ—Ä–±–æ—Ç—É!</b>")
    	
    	ids.remove(id)
    	self.db.set("xioca.loader", "allow", ids)
    	
    	await utils.answer(message, f"<emoji id=5206607081334906820>‚úîÔ∏è</emoji> <b>–ü—Ä–∞–≤–∞ –Ω–∞ —é–∑–µ—Ä–±–æ—Ç–∞ —É <a href='tg://user?id={id}'>{name}</a> —É—Å–ø–µ—à–Ω–æ –æ—Ç–Ω—è—Ç—ã!</b>")

    async def owneradd_cmd(self, app: Client, message: types.Message):
    	"""–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —é–∑–µ—Ä–±–æ—Ç—É"""
    	
    	r = message.reply_to_message
    	
    	if not r:
    		return await utils.answer(message, f"<emoji id=5210952531676504517>‚ùå</emoji> <b>–ù–µ–æ–±—Ö–æ–¥–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>")
    	
    	if self.all_modules.me.id == r.from_user.id:
    		return await utils.answer(message, "<emoji id=5210952531676504517>‚ùå</emoji> <b>–î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ —Å–∞–º–æ–º —Å–µ–±–µ!</b>")
    	
    	bot_results = await app.get_inline_bot_results((await self.bot.me()).username, f"owneradd {r.from_user.id}")
    	
    	await app.send_inline_bot_result(message.chat.id, bot_results.query_id, bot_results.results[0].id)
    	return await message.delete()
    
    @loader.on_bot(lambda self, app, inline_query: True)
    async def owneradd_inline_handler(self, app: Client, inline_query: InlineQuery):
    	"""–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —é–∑–µ—Ä–±–æ—Ç—É"""
    	
    	args = inline_query.query.split()
    	
    	if len(args) < 2:
    		return await inline_query.answer([], cache_time=0)
    	
    	message_id = utils.random_id()
    	id = int(args[1])
    	name = (await app.get_users(id)).first_name
    	
    	message = InputTextMessageContent(message_text=f"üõ° <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —é–∑–µ—Ä–±–æ—Ç—É <a href='tg://user?id={id}'>{name}</a>?</b> –û–Ω(–∞) –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º –≤–∞—à–µ–π Xioca, —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–µ—á—å –∑–∞ —Å–æ–±–æ–π –ø–ª–æ—Ö–∏–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è. –†–µ—à–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞ –≤–∞—à —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫!")
    	
    	msg = await inline_query.answer([InlineQueryResultArticle(id=message_id, title="üõ° –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", input_message_content=message, reply_markup=kb(id))], cache_time=0)
    	
    @loader.on_bot(lambda self, app, call: call.data.startswith("giveaccess_"))
    async def giveaccess_callback_handler(self, app: Client, call: CallbackQuery):
    	"""–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    	
    	cd = call.data.split("_")
    	id = int(cd[1])
    	
    	if call.from_user.id != self.all_modules.me.id:
    		return await call.answer("‚ùó –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤–∞—à–∞!", True)

    	ids = self.db.get("xioca.loader", "allow", [])
    	ids.append(id)
    	self.db.set("xioca.loader", "allow", ids)
    	name = (await app.get_users(id)).first_name
    	await self.bot.edit_message_text(inline_message_id=call.inline_message_id, text=f"‚úÖ <b>–î–æ—Å—Ç—É–ø <a href='tg://user?id={id}'>{name}</a> –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!</b>")
    
    @loader.on_bot(lambda self, app, call: call.data.startswith("cancel"))
    async def cancel_callback_handler(self, app: Client, call: CallbackQuery):
    	"""–û—Ç–∫–∞–∑"""
    	
    	cd = call.data.split("_")
    	id = int(cd[1])
    	
    	if call.from_user.id != self.all_modules.me.id:
    		return await call.answer("‚ùó –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤–∞—à–∞!", True)
    		
    	name = (await app.get_users(id)).first_name
    	await self.bot.edit_message_text(inline_message_id=call.inline_message_id, text=f"‚ùå <b>–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –¥–ª—è <a href='tg://user?id={id}'>{name}</a>!</b>")