#    Sh1t-UB (telegram userbot by sh1tn3t)
#    Copyright (C) 2021-2022 Sh1tN3t

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

import configparser
import time
import psutil
import platform
import socket
from datetime import datetime

from aiogram.types import (
    InlineQuery,
    InputTextMessageContent,
    InlineQueryResultArticle,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from pyrogram import Client, types
from .. import loader, utils, __version__, __start_time__


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üñ•Ô∏è –°–µ—Ä–≤–µ—Ä", callback_data="info_server"))
    return builder.as_markup()

def get_back_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="info"))
    return builder.as_markup()


def humanize_bytes(num: float) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    for unit in ["", "K", "M", "G", "T", "P", "E", "Z"]:
        if abs(num) < 1024.0:
            return f"{num:3.1f}{unit}B"
        num /= 1024.0
    return f"{num:.1f}YB"


def get_basic_info(me: types.User) -> str:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–±–æ—Ç–µ"""
    mention = f"<a href=\"tg://user?id={me.id}\">{utils.get_display_name(me)}</a>"
    uptime = datetime.now() - __start_time__
    uptime_str = str(uptime).split('.')[0]
    
    return f"""üåô <b>Xioca UserBot</b> <code>v{__version__}</code>

üëë <b>–í–ª–∞–¥–µ–ª–µ—Ü</b>: {mention}
‚è±Ô∏è <b>–ê–ø—Ç–∞–π–º</b>: <code>{uptime_str}</code>
üìÖ <b>–ó–∞–ø—É—â–µ–Ω</b>: <code>{__start_time__.strftime('%d.%m.%Y %H:%M:%S')}</code>

üíª <b>–°–∏—Å—Ç–µ–º–∞</b>: <code>{platform.system()} {platform.release()}</code>
üêç <b>Python</b>: <code>{platform.python_version()}</code>

‚ö° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ...</i>"""


def get_system_info() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    info = {
        "os": platform.system(),
        "release": platform.release(),
        "arch": " ".join(platform.architecture()),
        "python": platform.python_version()
    }
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –û–°
    if info["os"] == "Linux":
        try:
            with open("/etc/os-release", "r") as f:
                content = "[os]\n" + f.read()
            config = configparser.ConfigParser()
            config.read_string(content)
            info["distro"] = config["os"].get("PRETTY_NAME", "").strip('"') or "Linux"
        except:
            info["distro"] = "Linux"
    elif info["os"] == "Windows":
        info["distro"] = f"Windows {platform.win32_ver()[0]}"
    elif info["os"] == "Darwin":
        info["distro"] = f"macOS {platform.mac_ver()[0]}"
    else:
        info["distro"] = info["os"]
    
    return info


def get_hardware_info() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–π —á–∞—Å—Ç–∏"""
    try:
        # CPU
        cpu_freq = psutil.cpu_freq()
        cpu_info = {
            "usage": psutil.cpu_percent(),
            "cores": psutil.cpu_count(logical=False),
            "threads": psutil.cpu_count(),
            "freq": f"{int(cpu_freq.current)}MHz" if cpu_freq else "N/A",
            "max_freq": f"{int(cpu_freq.max)}MHz" if cpu_freq and cpu_freq.max else "N/A"
        }
        
        # RAM
        ram = psutil.virtual_memory()
        ram_info = {
            "used": humanize_bytes(ram.used),
            "total": humanize_bytes(ram.total),
            "percent": ram.percent
        }
        
        # –î–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤–æ–π —Ä–∞–∑–¥–µ–ª)
        disk_info = {}
        try:
            root_disk = psutil.disk_usage('/')
            disk_info = {
                "used": humanize_bytes(root_disk.used),
                "total": humanize_bytes(root_disk.total),
                "percent": root_disk.percent
            }
        except:
            disk_info = {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"}
        
        return {
            "cpu": cpu_info,
            "ram": ram_info,
            "disk": disk_info
        }
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}"}


def get_server_info_message() -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–µ—Ä–µ"""
    system = get_system_info()
    hardware = get_hardware_info()
    
    if "error" in hardware:
        return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ:</b>\n<code>{hardware['error']}</code>"
    
    message = [
        "üñ•Ô∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ</b>",
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê",
        "",
        "<b>‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞</b>:",
        f"‚Ä¢ –û–°: <code>{system['distro']}</code>",
        f"‚Ä¢ –Ø–¥—Ä–æ: <code>{system['release']}</code>",
        f"‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: <code>{system['arch']}</code>",
        f"‚Ä¢ Python: <code>{system['python']}</code>",
        "",
        "<b>üîß –ê–ø–ø–∞—Ä–∞—Ç–Ω–∞—è —á–∞—Å—Ç—å</b>:",
        f"‚Ä¢ CPU: <code>{hardware['cpu']['cores']}c/{hardware['cpu']['threads']}t</code>",
        f"‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ CPU: <code>{hardware['cpu']['usage']}%</code>",
        f"‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: <code>{hardware['cpu']['freq']}</code>",
        f"‚Ä¢ RAM: <code>{hardware['ram']['used']}/{hardware['ram']['total']}</code> (<code>{hardware['ram']['percent']}%</code>)",
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if "error" not in hardware['disk']:
        message.extend([
            f"‚Ä¢ –î–∏—Å–∫: <code>{hardware['disk']['used']}/{hardware['disk']['total']}</code> (<code>{hardware['disk']['percent']}%</code>)"
        ])
    
    message.extend([
        "",
        f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</i>"
    ])
    
    return "\n".join(message)


def is_user_allowed(user_id: int, allowed_ids: list, owner_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_id == owner_id or user_id in allowed_ids


@loader.module("sh1tn3t | shashachkaaa")
class InformationMod(loader.Module):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–±–æ—Ç–µ"""

    async def info_cmd(self, app: Client, message: types.Message):
        """–í—ã–∑—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–æ–º–∞–Ω–¥—É info. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: info"""
        await utils.inline(self, message, "info")

    @loader.on_bot(lambda self, app, inline_query: True)
    async def info_inline_handler(self, app: Client, inline_query: InlineQuery):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: @bot info"""
        message = get_basic_info(self.all_modules.me)
        await utils.answer_inline(inline_query, message, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", get_main_keyboard())

    @loader.on_bot(lambda self, app, call: call.data == "info")
    async def info_callback_handler(self, app: Client, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        allowed_ids = self.db.get("xioca.loader", "allow", [])
        if not is_user_allowed(call.from_user.id, allowed_ids, self.all_modules.me.id):
            return await call.answer("‚ùó –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å!", True)

        await call.answer()
        await self.bot.edit_message_text(
            inline_message_id=call.inline_message_id,
            text=get_basic_info(self.all_modules.me),
            reply_markup=get_main_keyboard()
        )

    @loader.on_bot(lambda self, app, call: call.data == "info_server")
    async def info_server_callback_handler(self, app: Client, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ"""
        allowed_ids = self.db.get("xioca.loader", "allow", [])
        if not is_user_allowed(call.from_user.id, allowed_ids, self.all_modules.me.id):
            return await call.answer("‚ùó –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å!", True)

        await call.answer()
        await self.bot.edit_message_text(
            inline_message_id=call.inline_message_id,
            text=get_server_info_message(),
            reply_markup=get_back_keyboard()
        )