#    Sh1t-UB (telegram userbot by sh1tn3t)
#    Copyright (C) 2021-2022 Sh1tN3t

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

import configparser
import time
import psutil
import platform
import socket
from datetime import datetime

from aiogram.types import (
    InlineQuery,
    InputTextMessageContent,
    InlineQueryResultArticle,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from pyrogram import Client, types
from .. import loader, utils, __version__, __start_time__


INFO_MARKUP = InlineKeyboardBuilder()
bback = InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="info")
INFO_MARKUP.row(bback)

INFO_SERVER_MARKUP = InlineKeyboardBuilder()
binfo = InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ", callback_data="info_server")
INFO_SERVER_MARKUP.row(binfo)


def humanize(num: float, suffix: str = "B") -> str:
    for unit in ["", "K", "M", "G", "T", "P", "E", "Z"]:
        if abs(num) < 1000.0:
            return "%3.1f%s%s" % (num, unit, suffix)
        num /= 1000.0

    return "%.1f%s%s" % (num, "Y", suffix)

def get_info_message(me: types.User):
    mention = f"<a href=\"tg://user?id={me.id}\">{utils.get_display_name(me)}</a>"
    uptime = datetime.now() - __start_time__
    uptime_str = str(uptime).split('.')[0]
    
    return f"""üåô <b>Xioca UserBot</b> <code>v{__version__}</code>

üëë <b>–í–ª–∞–¥–µ–ª–µ—Ü</b>: {mention}
‚è±Ô∏è <b>–ê–ø—Ç–∞–π–º</b>: <code>{uptime_str}</code>
üìÖ <b>–ó–∞–ø—É—â–µ–Ω</b>: <code>{__start_time__.strftime('%d.%m.%Y %H:%M:%S')}</code>

üíª <b>–°–∏—Å—Ç–µ–º–∞</b>: <code>{platform.system()} {platform.release()}</code>
üêç <b>Python</b>: <code>{platform.python_version()}</code>

‚ö° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ...</i>"""


def get_cpu_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ"""
    try:
        freq = psutil.cpu_freq()
        freq_current = f"{int(freq.current)} MHz" if freq else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        freq_max = f"{int(freq.max)} MHz" if freq and freq.max else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        return (
            f"    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{int(psutil.cpu_percent())}%</b>\n"
            f"    - –Ø–¥—Ä–∞: <b>{psutil.cpu_count(logical=False)}</b> (<b>{psutil.cpu_count()}</b> –ø–æ—Ç–æ–∫–æ–≤)\n"
            f"    - –ß–∞—Å—Ç–æ—Ç–∞: <b>{freq_current}</b> (–º–∞–∫—Å: <b>{freq_max}</b>)"
        )
    except:
        return "    - –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ"


def get_ram_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏"""
    try:
        ram = psutil.virtual_memory()
        swap = psutil.swap_memory() if hasattr(psutil, 'swap_memory') else None
        
        ram_info = (
            f"    - –û–ó–£:\n"
            f"      - –ó–∞–Ω—è—Ç–æ: <b>{humanize(ram.used)}</b> (<b>{int(ram.percent)}%</b>)\n"
            f"      - –í—Å–µ–≥–æ: <b>{humanize(ram.total)}</b>"
        )
        
        if swap:
            ram_info += (
                f"\n    - SWAP:\n"
                f"      - –ó–∞–Ω—è—Ç–æ: <b>{humanize(swap.used)}</b> (<b>{int(swap.percent)}%</b>)\n"
                f"      - –í—Å–µ–≥–æ: <b>{humanize(swap.total)}</b>"
            )
        
        return ram_info
    except:
        return "    - –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏"


def get_disk_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–∞—Ö"""
    try:
        disks = []
        for part in psutil.disk_partitions(all=False):
            try:
                usage = psutil.disk_usage(part.mountpoint)
                disks.append(
                    f"    - <b>{part.device}</b> ({part.fstype}):\n"
                    f"      - –ó–∞–Ω—è—Ç–æ: <b>{humanize(usage.used)}</b> (<b>{int(usage.percent)}%</b>)\n"
                    f"      - –í—Å–µ–≥–æ: <b>{humanize(usage.total)}</b>"
                )
            except:
                continue
        
        return "\n\n".join(disks) if disks else "    - –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏—Å–∫–∞—Ö"
    except:
        return "    - –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–∞—Ö"


def get_other_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—á—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    try:
        os_name = platform.system()
        kernel = platform.release() or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        arch = " ".join(platform.architecture()) if hasattr(platform, 'architecture') else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –î–ª—è Termux
        if "ANDROID_ROOT" in os.environ:
            try:
                import subprocess
                android_ver = subprocess.check_output(["getprop", "ro.build.version.release"]).decode().strip()
                return (
                    f"    - –û–°: <b>Android (Termux)</b>\n"
                    f"    - –í–µ—Ä—Å–∏—è Android: <b>{android_ver}</b>\n"
                    f"    - –Ø–¥—Ä–æ: <b>{kernel}</b>\n"
                    f"    - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: <b>{arch}</b>"
                )
            except:
                return (
                    f"    - –û–°: <b>Android (Termux)</b>\n"
                    f"    - –Ø–¥—Ä–æ: <b>{kernel}</b>\n"
                    f"    - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: <b>{arch}</b>"
                )

        if os_name == "Linux":
            try:
                with open("/etc/os-release", "r") as file:
                    content = "[linux]\n" + file.read()
                
                config = configparser.ConfigParser()
                config.read_string(content)
                
                distro_name = config["linux"].get("PRETTY_NAME", "") or config["linux"].get("NAME", "")
                distro_name = distro_name.strip('"') if distro_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                return (
                    f"    - –û–°: <b>Linux</b>\n"
                    f"    - –î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤: <b>{distro_name}</b>\n"
                    f"    - –Ø–¥—Ä–æ: <b>{kernel}</b>\n"
                    f"    - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: <b>{arch}</b>"
                )
            except:
                return (
                    f"    - –û–°: <b>Linux</b>\n"
                    f"    - –Ø–¥—Ä–æ: <b>{kernel}</b>\n"
                    f"    - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: <b>{arch}</b>"
                )
        elif os_name == "Windows":
            try:
                win_ver = platform.win32_ver()[0] if hasattr(platform, 'win32_ver') else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                return (
                    f"    - –û–°: <b>Windows</b>\n"
                    f"    - –í–µ—Ä—Å–∏—è: <b>{win_ver}</b>\n"
                    f"    - –Ø–¥—Ä–æ: <b>{kernel}</b>\n"
                    f"    - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: <b>{arch}</b>"
                )
            except:
                return (
                    f"    - –û–°: <b>Windows</b>\n"
                    f"    - –Ø–¥—Ä–æ: <b>{kernel}</b>\n"
                    f"    - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: <b>{arch}</b>"
                )
        elif os_name == "Darwin":
            try:
                mac_ver = platform.mac_ver()[0] if hasattr(platform, 'mac_ver') else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                return (
                    f"    - –û–°: <b>macOS</b>\n"
                    f"    - –í–µ—Ä—Å–∏—è: <b>{mac_ver}</b>\n"
                    f"    - –Ø–¥—Ä–æ: <b>{kernel}</b>\n"
                    f"    - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: <b>{arch}</b>"
                )
            except:
                return (
                    f"    - –û–°: <b>macOS</b>\n"
                    f"    - –Ø–¥—Ä–æ: <b>{kernel}</b>\n"
                    f"    - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: <b>{arch}</b>"
                )
        else:
            return (
                f"    - –û–°: <b>{os_name}</b>\n"
                f"    - –Ø–¥—Ä–æ: <b>{kernel}</b>\n"
                f"    - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: <b>{arch}</b>"
            )
    except:
        return "    - –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"


@loader.module("sh1tn3t | shashachkaaa")
class InformationMod(loader.Module):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–±–æ—Ç–µ"""

    async def info_cmd(self, app: Client, message: types.Message):
        """–í—ã–∑—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–æ–º–∞–Ω–¥—É info. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: info"""
        bot_results = await app.get_inline_bot_results(
            (await self.bot.me()).username, "info")

        await app.send_inline_bot_result(
            message.chat.id, bot_results.query_id,
            bot_results.results[0].id
        )
        return await message.delete()

    @loader.on_bot(lambda self, app, inline_query: True)
    async def info_inline_handler(self, app: Client, inline_query: InlineQuery):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: @bot info"""
        message = InputTextMessageContent(message_text=get_info_message(self.all_modules.me))

        return await inline_query.answer(
            [
                InlineQueryResultArticle(
                    id=utils.random_id(),
                    title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    input_message_content=message,
                    reply_markup=INFO_SERVER_MARKUP.as_markup(),
                    thumb_url="https://api.fl1yd.su/emoji/2139-fe0f.png",
                )
            ], cache_time=0
        )

    @loader.on_bot(lambda self, app, call: call.data == "info")
    async def info_callback_handler(self, app: Client, call: CallbackQuery):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–±–æ—Ç–µ"""
        
        ids = self.db.get("xioca.loader", "allow", [])
        if call.from_user.id != self.all_modules.me.id:
            if call.from_user.id not in ids:
                return await call.answer("‚ùó –ê —ç—Ç–∞ –∫–Ω–æ–ø–æ—á–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è!", True)

        await call.answer()

        return await self.bot.edit_message_text(
            inline_message_id=call.inline_message_id,
            text=get_info_message(self.all_modules.me),
            reply_markup=INFO_SERVER_MARKUP.as_markup()
        )

    @loader.on_bot(lambda self, app, call: call.data == "info_server")
    async def info_server_callback_handler(self, app: Client, call: CallbackQuery):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ"""
        
        ids = self.db.get("xioca.loader", "allow", [])
        if call.from_user.id != self.all_modules.me.id:
            if call.from_user.id not in ids:
                return await call.answer("‚ùó –ê —ç—Ç–∞ –∫–Ω–æ–ø–æ—á–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è!", True)

        await call.answer()

        message = (
            f"<b>üñ•Ô∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ</b>\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
            f"<b>üîß –ê–ø–ø–∞—Ä–∞—Ç–Ω–∞—è —á–∞—Å—Ç—å</b>:\n"
            f"<b>üß† –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä</b>:\n"
            f"{get_cpu_info()}\n\n"
            f"<b>üíæ –ü–∞–º—è—Ç—å</b>:\n"
            f"{get_ram_info()}\n\n"
            f"<b>üíø –î–∏—Å–∫–∏</b>:\n"
            f"{get_disk_info()}\n\n"
            f"<b>‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞</b>:\n"
            f"{get_other_info()}\n\n"
            f"<i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</i>"
        )
        return await self.bot.edit_message_text(
            inline_message_id=call.inline_message_id,
            text=message,
            reply_markup=INFO_MARKUP.as_markup()
        )