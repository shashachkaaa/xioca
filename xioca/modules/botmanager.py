import logging
import html
import time
import atexit
import sys
import os
import re
import io
import requests
import traceback
import asyncio
from datetime import datetime
from packaging import version as ver

from aiogram.types import (
    InlineQuery,
    InputTextMessageContent,
    InlineQueryResultArticle,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    Message,
    BufferedInputFile,
    FSInputFile
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from meval import meval

from pyrogram import Client, types
from .. import loader, utils, logger, __version__, __start_time__, __system_mod__, __get_version_url__, __get_commits_url__

back = InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="userbot_back")

def start_kb():
	b1 = InlineKeyboardButton(text="üéõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–±–æ—Ç–æ–º", callback_data="userbot_control")
	b2 = InlineKeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —é–∑–µ—Ä–±–æ—Ç–∞", callback_data="userbot_settings")
	b3 = InlineKeyboardButton(text="‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="userbot_info")
	
	kb = InlineKeyboardBuilder()
	kb.row(b1)
	kb.row(b2)
	kb.row(b3)
	return kb.as_markup()

def control(status):
	if status:
		b1 = InlineKeyboardButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å —é–∑–µ—Ä–±–æ—Ç–∞", callback_data="userbot_stop")
	else:
		b1 = InlineKeyboardButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å —é–∑–µ—Ä–±–æ—Ç–∞", callback_data="userbot_start")
	
	b2 = InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —é–∑–µ—Ä–±–æ—Ç–∞", callback_data="userbot_restart")
	b3 = InlineKeyboardButton(text="üÜï –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", callback_data="userbot_checkupdate")
	b4 = InlineKeyboardButton(text="üì§ –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏", callback_data="userbot_logs")
	
	kb = InlineKeyboardBuilder()
	kb.row(b1, b2)
	kb.row(b3)
	kb.row(b4)
	kb.row(back)
	return kb.as_markup()

def logs_kb():
	b1 = InlineKeyboardButton(text="üìú NOTSET", callback_data="userbot_logs_NOTSET")
	b2 = InlineKeyboardButton(text="üêõ DEBUG", callback_data="userbot_logs_DEBUG")
	b3 = InlineKeyboardButton(text="‚Ñπ INFO", callback_data="userbot_logs_INFO")
	b4 = InlineKeyboardButton(text="‚ö† WARNING", callback_data="userbot_logs_WARNING")
	b5 = InlineKeyboardButton(text="‚ùå ERROR", callback_data="userbot_logs_ERROR")
	b6 = InlineKeyboardButton(text="‚õî CRITICAL", callback_data="userbot_logs_CRITICAL")
	
	kb = InlineKeyboardBuilder()
	kb.row(b1, b2)
	kb.row(b3, b4)
	kb.row(b5, b6)
	kb.row(back)
	
	return kb.as_markup()

def settings():
	b1 = InlineKeyboardButton(text="üåô –ú–æ–¥—É–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä", callback_data="userbot_modulemanager")
	b2 = InlineKeyboardButton(text="üóÇ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data="userbot_dbsettings")
	
	kb = InlineKeyboardBuilder()
	kb.row(b1)
	kb.row(b2)
	kb.row(back)
	
	return kb.as_markup()

def dbsettings():
	b1 = InlineKeyboardButton(text="‚öô –í—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∑–∞–ø—Ä–æ—Å", callback_data="userbot_sqlquery")
	b2 = InlineKeyboardButton(text="üì§ –°–∫–∞—á–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", callback_data="userbot_getdb")
	
	kb = InlineKeyboardBuilder()
	kb.row(b1)
	kb.row(b2)
	kb.row(back)
	
	return kb.as_markup()

def back_kb():
	kb = InlineKeyboardBuilder()
	kb.row(back)
	
	return kb.as_markup()

def info_kb():
	b1 = InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/xiocaub")
	b2 = InlineKeyboardButton(text="üóÉ –ú–æ–¥—É–ª–∏", url="https://xioca.live/mods")
	
	kb = InlineKeyboardBuilder()
	kb.row(b1, b2)
	kb.row(back)
	
	return kb.as_markup()

def modules_kb(self, page: int = 0, per_page: int = 25):
    all_modules = self.all_modules.modules
    
    system_modules = []
    user_modules = []
    
    for module in all_modules:
        if module.name.lower() in __system_mod__:
            system_modules.append(module)
        else:
            user_modules.append(module)
    
    sorted_modules = system_modules + user_modules
    total_pages = (len(sorted_modules) // per_page) + (1 if len(sorted_modules) % per_page else 0)
    
    start_idx = page * per_page
    end_idx = start_idx + per_page
    page_modules = sorted_modules[start_idx:end_idx]
    
    kb = InlineKeyboardBuilder()
    
    buttons = []
    for module in page_modules:
        buttons.append(
            InlineKeyboardButton(
                text=module.name,
                callback_data=f"userbot_module_{module.name.lower()}"
            )
        )
        
        if len(buttons) == 5:
            kb.row(*buttons)
            buttons = []
    
    if buttons:
        kb.row(*buttons)
    
    pagination_buttons = []
    
    if page > 0:
        pagination_buttons.append(
            InlineKeyboardButton(
                text="‚¨Ö",
                callback_data=f"userbot_modulespage_{page - 1}"
            )
        )
    
    if page < total_pages - 1:
        pagination_buttons.append(
            InlineKeyboardButton(
                text="‚û°",
                callback_data=f"userbot_modulespage_{page + 1}"
            )
        )
    
    if pagination_buttons:
        kb.row(*pagination_buttons)
    
    kb.row(back)
    
    return kb.as_markup()

def module_settings_kb(name, actions: bool = True):
	b1 = InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"userbot_deletemodule_{name}")
	
	kb = InlineKeyboardBuilder()
	if actions:
		kb.row(b1)

	kb.row(back)

	return kb.as_markup()

@loader.module("shashachkaaa", __version__)
class BotManagerMod(loader.Module):
	"""–ë–æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""
	
	def _start(self):
		os.execl(sys.executable, sys.executable, "-m", "xioca")
	
	CRITICAL_KEYWORDS = [
		"security", "critical", "fix", "hotfix", 
		"urgent", "–≤–∞–∂–Ω–æ", "–∫—Ä–∏—Ç–∏—á–Ω–æ", "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
		"—É—è–∑–≤–∏–º–æ—Å—Ç—å", "vulnerability", "—Ñ–∏–∫—Å"
	]
	
	def _is_critical_update(self, commit_message: str) -> bool:
		commit_message_lower = commit_message.lower()
		return any(keyword in commit_message_lower for keyword in self.CRITICAL_KEYWORDS)
	
	async def auto_check_update(self):
		while True:
			nu = self.db.get("xioca.loader", "new_update", False)
			if not nu:
				await asyncio.sleep(100)
			else:
				await asyncio.sleep(7200)
			await self._check_update()
	
	async def _check_update(self):
		try:
			r = requests.get(__get_version_url__)
			match = re.search(r"__version__\s*=\s*['\"]([^'\"]+)['\"]", r.text)
			if not match:
				return
			
			version = match.group(1)
			if ver.parse(str(version)) == ver.parse(str(__version__)):
				return False
			
			response = requests.get(__get_commits_url__, params={"per_page": 1})
			response.raise_for_status()
			commits = response.json()
			
			if not commits:
				changes = ["‚Ñπ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"]
				is_critical = False
			else:
				commit = commits[0]
				commit_sha = commit["sha"]
				commit_message = commit["commit"]["message"].split("\n")[0]
				is_critical = self._is_critical_update(commit_message)
				commit_url = f"{__get_commits_url__}/{commit_sha}"
				files_response = requests.get(commit_url)
				files_response.raise_for_status()
				commit_data = files_response.json()
				
				files = [f["filename"] for f in commit_data.get("files", [])]
				changes = [
					f"üìå <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ <code>{commit_sha[:7]}</code>:</b>",
					f"üí¨ <code>{commit_message}</code>"
				]
				
				if files:
					changes.append("üìÇ <b>–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</b>")
					changes.extend(f"  - <code>{file}</code>" for file in files[:5])
					if len(files) > 5:
						changes.append(f"  ... –∏ –µ—â—ë {len(files)-5} —Ñ–∞–π–ª–æ–≤")
			update_header = (
				"üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï!</b>\n"
				if is_critical else
				"üîî <b>–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è!</b>"
			)
			chg = "\n".join(changes)
			
			update_kb = InlineKeyboardBuilder()
			upd = InlineKeyboardButton(text="üîÑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data="update")
			update_kb.row(upd)
			await self.bot.send_message(self.all_modules.me.id, f"""{update_header}
–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: <code>{__version__}</code>
–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: <code>{version}</code>

{chg}""", reply_markup=update_kb.as_markup())
			self.db.set("xioca.loader", "new_update", True)
			return True
		except Exception as e:
			logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
	
	async def on_load(self, app: Client):
		status = self.db.set("xioca.loader", "status", True)
		if (restart := self.db.get("xioca.loader", "restart")):
			if restart["type"] == "bot_restart":
				id = restart["msg"].split(":")
				status = self.db.get("xioca.loader", "status", True)
				prefixes = self.db.get("xioca.loader", "prefixes", ["."])
				prefix = " | ".join(prefixes)
				uptime = datetime.now() - __start_time__
				uptime_str = str(uptime).split('.')[0]
				upt = f'‚åö <b>–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞:</b> {uptime_str}\n' if status else '\n'
				try:
					await self.bot.edit_message_text(chat_id=int(id[0]), message_id=int(id[1]), text=f"""üéõ –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –º–µ–Ω—é –≤—ã —Å–º–æ–∂–µ—Ç–µ <b>—É–ø—Ä–∞–≤–ª—è—Ç—å —é–∑–µ—Ä–±–æ—Ç–æ–º</b>.

<b>{'üü¢ –Æ–∑–µ—Ä–±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω' if status else 'üî¥ –Æ–∑–µ—Ä–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω'}
üåô –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥—É–ª–µ–π:</b> {len(self.all_modules.modules)}
‚úè <b>–ü—Ä–µ—Ñ–∏–∫—Å(—ã):</b> ({prefix})
{upt}
üëá <i>–ñ–º–∏ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ –±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–æ–µ –ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å —é–∑–µ—Ä–±–æ—Ç–æ–º.</i>""", reply_markup=control(status))
				except:
					pass
		
		if not self.db.get("xioca.loader", "start", False):
			try:
				b = InlineKeyboardButton(text="Xioca UB", url="https://t.me/XiocaUB")
				kb = InlineKeyboardBuilder()
				kb.row(b)
				await self.bot.send_message(self.all_modules.me.id, """üåô <b>Xioca —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ!
                
‚Ñπ –ë—ã—Å—Ç—Ä—ã–π –≥–∞–π–¥ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>
<code>.help</code> - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
<code>.help</code> [–∫–æ–º–∞–Ω–¥–∞ / –º–æ–¥—É–ª—å] - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.
<code>.loadmod</code> [–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–∞–π–ª] - –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –∏–∑ —Ñ–∞–π–ª–∞.
<code>.unloadmod</code> [–º–æ–¥—É–ª—å] - –í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å.
<code>.ping</code> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç.
<code>.restart</code> - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.
<code>.update</code> - –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞.
<code>.logs</code> - –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞.
<code>.terminal</code> [–∫–æ–º–∞–Ω–¥–∞] - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É.

‚≠ê <i><b>–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ</b></i>""", reply_markup=kb.as_markup())
				self.db.set("xioca.loader", "start", True)
			except Exception as e:
				logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
		asyncio.create_task(self.auto_check_update())
		await self._check_update()
		self.db.set("xioca.bot", "sql_status", False)
		logging.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω!")
	
	@loader.on_bot(lambda self, app, m: m.text == "/start")
	async def start_message_handler(self, app: Client, message: Message):
		"""–ú–µ–Ω—é"""
    
		if self.all_modules.me.id != message.from_user.id:
			return await message.answer("""üòé –≠—Ç–æ - <code>Xioca</code>. –û—Ç–ª–∏—á–Ω—ã–π —é–∑–µ—Ä–±–æ—Ç —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–º–∞–Ω–¥ –∏ –º–æ–¥—É–ª–µ–π –∫ –Ω–µ–º—É.
			
‚ùì <b>–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?</b>
–î–ª—è <b>—É—Å—Ç–∞–Ω–æ–≤–∫–∏</b> –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å <a href='https://xioca.live'>—Å–∞–π—Ç–æ–º</a>.

üåü <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
- –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã.
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞.
- –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.
- –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞.

üìö <b>–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:</b>
–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ <a href='https://github.com/shashachkaaa/Xioca'>–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏</a>.

üõ† <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ <a href='https://t.me/XiocaUB'>—á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏</a>.""")
		await message.answer(f"""üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é</b>, —è - —á–∞—Å—Ç—å —Ç–≤–æ–µ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞ <code>Xioca</code>, —Ç—É—Ç —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —é–∑–µ—Ä–±–æ—Ç–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä–æ—á–µ–µ.

üëá <i>–ñ–º–∏ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.</i>""", reply_markup=start_kb())
	
	@loader.on_bot(lambda self, app, call: call.data.startswith("userbot_"))
	async def userbot_callback_handler(self, app, callback):
		if self.all_modules.me.id != callback.from_user.id:
			return await callback.answer(f"–ö–Ω–æ–ø–∫–∞ –Ω–µ –≤–∞—à–∞!")
		
		cd = callback.data.split("_")
		data = cd[1]
		
		if data == "back":
			self.db.set("xioca.bot", "sql_status", False)
			await callback.message.delete()
			await callback.message.answer(f"""üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é</b>, —è - —á–∞—Å—Ç—å —Ç–≤–æ–µ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞ <code>Xioca</code>, —Ç—É—Ç —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —é–∑–µ—Ä–±–æ—Ç–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä–æ—á–µ–µ.

üëá <i>–ñ–º–∏ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.</i>""", reply_markup=start_kb())
		
		elif data == "control":
			status = self.db.get("xioca.loader", "status", True)
			prefixes = self.db.get("xioca.loader", "prefixes", ["."])
			prefix = " | ".join(prefixes)
			uptime = datetime.now() - __start_time__
			uptime_str = str(uptime).split('.')[0]
			upt = f'‚åö <b>–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞:</b> {uptime_str}\n' if status else '\n'
			
			await callback.message.edit_text(f"""üéõ –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –º–µ–Ω—é –≤—ã —Å–º–æ–∂–µ—Ç–µ <b>—É–ø—Ä–∞–≤–ª—è—Ç—å —é–∑–µ—Ä–±–æ—Ç–æ–º</b>.

<b>{'üü¢ –Æ–∑–µ—Ä–±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω' if status else 'üî¥ –Æ–∑–µ—Ä–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω'}
üåô –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥—É–ª–µ–π:</b> {len(self.all_modules.modules)}
‚úè <b>–ü—Ä–µ—Ñ–∏–∫—Å(—ã):</b> ({prefix})
{upt}
üëá <i>–ñ–º–∏ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ –±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–æ–µ –ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å —é–∑–µ—Ä–±–æ—Ç–æ–º.</i>""", reply_markup=control(status))

		elif data == "stop":
			await app.stop()
			status = self.db.set("xioca.loader", "status", False)
			status = self.db.get("xioca.loader", "status", True)
			prefixes = self.db.get("xioca.loader", "prefixes", ["."])
			prefix = " | ".join(prefixes)
			uptime = datetime.now() - __start_time__
			uptime_str = str(uptime).split('.')[0]
			upt = f'\n‚åö <b>–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞:</b> {uptime_str}\n' if status else '\n'
			
			await callback.message.edit_text(f"""üéõ –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –º–µ–Ω—é –≤—ã —Å–º–æ–∂–µ—Ç–µ <b>—É–ø—Ä–∞–≤–ª—è—Ç—å —é–∑–µ—Ä–±–æ—Ç–æ–º</b>.

<b>{'üü¢ –Æ–∑–µ—Ä–±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω' if status else 'üî¥ –Æ–∑–µ—Ä–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω'}
üåô –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥—É–ª–µ–π:</b> {len(self.all_modules.modules)}
‚úè <b>–ü—Ä–µ—Ñ–∏–∫—Å(—ã):</b> ({prefix}){upt}
üëá <i>–ñ–º–∏ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ –±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–æ–µ –ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å —é–∑–µ—Ä–±–æ—Ç–æ–º.</i>""", reply_markup=control(status))

		elif data == "start":
			atexit.register(self._start)
			
			self.db.set(
				"xioca.loader", "restart", {
					"msg": f"{callback.message.chat.id}:{callback.message.message_id}",
					"type": "bot_restart",
					"time": time.time()
				}
			)
			
			await callback.answer(f"üöÄ Xioca –≤–∫–ª—é—á–∞–µ—Ç—Å—è, –æ–∂–∏–¥–∞–π—Ç–µ...", True)
			prefixes = self.db.get("xioca.loader", "prefixes", ["."])
			prefix = " | ".join(prefixes)
			status = self.db.get("xioca.loader", "status", True)
			await callback.message.edit_text(f"""üéõ –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –º–µ–Ω—é –≤—ã —Å–º–æ–∂–µ—Ç–µ <b>—É–ø—Ä–∞–≤–ª—è—Ç—å —é–∑–µ—Ä–±–æ—Ç–æ–º</b>.

<b>üöÄ –Æ–∑–µ—Ä–±–æ—Ç –≤–∫–ª—é—á–∞–µ—Ç—Å—è...
üåô –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥—É–ª–µ–π:</b> {len(self.all_modules.modules)}
‚úè <b>–ü—Ä–µ—Ñ–∏–∫—Å(—ã):</b> ({prefix})

üëá <i>–ñ–º–∏ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ –±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–æ–µ –ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å —é–∑–µ—Ä–±–æ—Ç–æ–º.</i>""", reply_markup=control(status))
			sys.exit(0)
			
		elif data == "restart":
			atexit.register(self._start)
			status = self.db.get("xioca.loader", "status", True)
			
			if not status:
				return await callback.answer(f"‚ùå –Æ–∑–µ—Ä–±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∏—Ç—å!")
			
			self.db.set(
				"xioca.loader", "restart", {
					"msg": f"{callback.message.chat.id}:{callback.message.message_id}",
					"type": "bot_restart",
					"time": time.time()
				}
			)
			
			status = self.db.set("xioca.loader", "status", True)
			await callback.answer(f"üîÑ Xioca –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –æ–∂–∏–¥–∞–π—Ç–µ...", True)
			prefixes = self.db.get("xioca.loader", "prefixes", ["."])
			prefix = " | ".join(prefixes)
			await callback.message.edit_text(f"""üéõ –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –º–µ–Ω—é –≤—ã —Å–º–æ–∂–µ—Ç–µ <b>—É–ø—Ä–∞–≤–ª—è—Ç—å —é–∑–µ—Ä–±–æ—Ç–æ–º</b>.

<b>üîÑ –Æ–∑–µ—Ä–±–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...
üåô –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥—É–ª–µ–π:</b> {len(self.all_modules.modules)}
‚úè <b>–ü—Ä–µ—Ñ–∏–∫—Å(—ã):</b> ({prefix})

üëá <i>–ñ–º–∏ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ –±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–æ–µ –ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å —é–∑–µ—Ä–±–æ—Ç–æ–º.</i>""", reply_markup=control(status))
			sys.exit(0)
		
		elif data == "checkupdate":
			status = self.db.get("xioca.loader", "status", True)
			
			if not status:
				return await callback.answer(f"‚ùå –Æ–∑–µ—Ä–±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∏—Ç—å!")
				
			cu = await self._check_update()
			if not cu:
				return await callback.answer(f"‚úÖ –£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è Xioca!", True)
			await callback.answer()
			
		elif data == "logs":
			if len(cd) < 3:
				await callback.message.edit_text(f'üëá –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤', reply_markup=logs_kb())
			else:
				lvl = logger.get_valid_level(cd[2])
				handler = logging.getLogger().handlers[0]
				logs = ("\n".join(handler.dumps(lvl))).encode("utf-8")
				if not logs:
					return await callback.answer(f"‚ùï –ù–µ—Ç –ª–æ–≥–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ {lvl} ({logging.getLevelName(lvl)})", True)
				
				logs = io.BytesIO(logs)
				logs.name = f"xioca_{cd[2]}.txt"
				document = BufferedInputFile(logs.read(), filename=f"xioca_{cd[2]}.txt")
				await self.bot.send_document(callback.from_user.id, document=document)
				logs.close()
				await callback.answer()
				
		elif data == "settings":
			await callback.message.edit_text(f"""‚öô –≠—Ç–æ <b>–º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫</b> Xioca. –¢—É—Ç –º–æ–∂–Ω–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —é–∑–µ—Ä–±–æ—Ç–æ–º –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —é–∑–µ—Ä–±–æ—Ç–µ.

üëá <i>–í—ã–±–µ—Ä–∞–π –Ω–∏–∂–µ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å.</i>""", reply_markup=settings())

		elif data == "modulemanager":
			await callback.message.edit_text("""üåô –≠—Ç–æ <b>–º–æ–¥—É–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä</b> –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –º–æ–¥—É–ª–µ–π. –¢—É—Ç —Ç—ã –∏–º–µ–µ—à—å –ø–æ–ª–Ω—É—é –≤–ª–∞—Å—Ç—å –Ω–∞–¥ –Ω–∏–º–∏. –≠—Ç–æ –º–µ–Ω—é –º–æ–∂–µ—Ç —á–∞—Å—Ç–æ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –ø—Ä–∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∞—Ö —Å —é–∑–µ—Ä–±–æ—Ç–æ–º.

üëá <i>–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å –Ω–∏–∂–µ, —á—Ç–æ –±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–æ–µ –ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∏–º.</i>""", reply_markup=modules_kb(self, page=0))
		
		elif data == "modulespage":
			await callback.message.edit_text("""üåô –≠—Ç–æ <b>–º–æ–¥—É–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä</b> –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –º–æ–¥—É–ª–µ–π. –¢—É—Ç —Ç—ã –∏–º–µ–µ—à—å –ø–æ–ª–Ω—É—é –≤–ª–∞—Å—Ç—å –Ω–∞–¥ –Ω–∏–º–∏. –≠—Ç–æ –º–µ–Ω—é –º–æ–∂–µ—Ç —á–∞—Å—Ç–æ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –ø—Ä–∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∞—Ö —Å —é–∑–µ—Ä–±–æ—Ç–æ–º.

üëá <i>–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å –Ω–∏–∂–µ, —á—Ç–æ –±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–æ–µ –ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∏–º.</i>""", reply_markup=modules_kb(self, page=int(cd[2])))

		elif data == "module":
			name = cd[2]
			
			if name in __system_mod__:
				actions = False
			else:
				actions = True
			
			module = self.all_modules.get_module(name)
			prefix = self.db.get("xioca.loader", "prefixes", ["."])[0]
			author = f"<b>‚ù§Ô∏è –ê–≤—Ç–æ—Ä:</b> <code>{module.author}</code>\n" if module.author else ""
			vers = f"<b>0Ô∏è‚É£ –í–µ—Ä—Å–∏—è:</b> <code>{module.version}</code>\n" if module.version else ""
			desc = f"""\n<b>‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:</b>
    ‚ï∞ {module.__doc__ or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –º–æ–¥—É–ª—è'}\n"""
			
			await callback.message.edit_text(f"""<b>üåô –ú–æ–¥—É–ª—å:</b> <code>{module.name}</code>
{author}{vers}{desc}
{'üëá <i>–í—ã–±–µ—Ä–∏, –∫–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å –º–æ–¥—É–ª–µ–º.</i>' if actions else 'üôÖ‚Äç‚ôÇ <i>–≠—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–¥—É–ª—å, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–∏–µ –ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∏–º.</i>'}""", reply_markup=module_settings_kb(name, actions))
		
		elif data == "deletemodule":
			mod = cd[2].lower()
			
			self.all_modules.unload_module(mod)
			os.remove(f"xioca/modules/{mod}.py")
			
			await callback.answer(f'‚úÖ –ú–æ–¥—É–ª—å "{mod}" —É—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω!', True)
			return await callback.message.edit_text("""üåô –≠—Ç–æ <b>–º–æ–¥—É–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä</b> –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –º–æ–¥—É–ª–µ–π. –¢—É—Ç —Ç—ã –∏–º–µ–µ—à—å –ø–æ–ª–Ω—É—é –≤–ª–∞—Å—Ç—å –Ω–∞–¥ –Ω–∏–º–∏. –≠—Ç–æ –º–µ–Ω—é –º–æ–∂–µ—Ç —á–∞—Å—Ç–æ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –ø—Ä–∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∞—Ö —Å —é–∑–µ—Ä–±–æ—Ç–æ–º.

üëá <i>–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å –Ω–∏–∂–µ, —á—Ç–æ –±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–æ–µ –ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∏–º.</i>""", reply_markup=modules_kb(self, page=0))
		
		elif data == "dbsettings":
			return await callback.message.edit_text("""üóÇ –≠—Ç–æ –º–µ–Ω—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ <b>–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b> (SQLite3). –ë—É–¥—å –æ—á–µ–Ω—å –æ–∫–∫—É—Ä–∞—Ç–µ–Ω —Å —ç—Ç–∏–º –º–µ–Ω—é, –æ–¥–Ω–æ –ª–∏—à–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–µ—Ç –ø–æ–≤–ª–µ—á—å –∑–∞ —Å–æ–±–æ–π –æ—á–µ–Ω—å –ø–ª–æ—Ö–∏–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è.

üëá <i>–í—ã–±–µ—Ä–∞–π —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å.</i>""", reply_markup=dbsettings())
		
		elif data == "sqlquery":
			self.db.set("xioca.bot", "sql_status", True)
			return await callback.message.edit_text(f"""‚öô –í–≤–æ–¥–∏ —Å—é–¥–∞ SQL –∑–∞–ø—Ä–æ—Å —Å <b>–±–æ–ª—å—à–æ–π –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é</b>. –î–∞–∂–µ –æ–¥–Ω–∞ –º–∞–ª–µ–Ω—å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –º–æ–∂–µ—Ç –ø–æ–≤–ª–µ—á—å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è.

‚Ñπ –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: <code>db.get(...)</code>""", reply_markup=back_kb())
		
		elif data == "getdb":
			await callback.answer()
			await self.bot.send_document(chat_id=callback.message.chat.id, document=FSInputFile("db.db"), caption=f'üóÇ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Xioca –∑–∞</b> <code>{(datetime.now()).strftime("%Y-%m-%d %H:%M:%S")}</code>')
		
		elif data == "info":
			return await callback.message.edit_text(f"""üåô <b>Xioca userbot</b> <code>{__version__}</code>
üßë‚Äçüíª <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> <a href='https://t.me/shashachkaaa'>–ò–ª—å—è –ï–≤–≥–µ–Ω—å–µ–≤–∏—á</a>""", disable_web_page_preview=True, reply_markup=info_kb())

	@loader.on_bot(lambda _, m: True)
	async def watcher(self, app, message):
		status = self.db.get("xioca.bot", "sql_status", True)
		
		if not status:
			return
		
		if message.from_user.id != self.all_modules.me.id:
			return
		
		chat_id = message.from_user.id
		
		if not message.text.startswith("self.db.") and not message.text.startswith("db."):
			return await self.bot.send_message(chat_id, f"‚ùå <b>–≠—Ç–æ –Ω–µ SQL –∑–∞–ø—Ä–æ—Å!</b>")
		
		try:
			result = html.escape(str(await meval(message.text, globals(), **self.getattrs(app, message))))
		except:
			return await self.bot.send_message(chat_id, f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> <code>{html.escape(traceback.format_exc())}</code>")
		
		output = (f"""‚úÖ <b>SQL –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω:</b>
<code>{result}</code>""")
		outputs = [output[i: i + 4083] for i in range(0, len(output), 4083)]
		await self.bot.send_message(chat_id, f"{outputs[0]}")
		for output in outputs[1:]:
			await self.bot.send_message(chat_id, f"<code>{output}</code>")
	
	def getattrs(self, app: Client, message: types.Message):
		return {
			"self": self,
			"db": self.db
			}	