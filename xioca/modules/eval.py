#    Sh1t-UB (telegram userbot by sh1tn3t)
#    Copyright (C) 2021-2022 Sh1tN3t

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

import traceback
import html
from meval import meval
from pyrogram import Client, types
from .. import loader, utils

def format_text_with_entities(text, entities):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º —Å—É—â–Ω–æ—Å—Ç–µ–π (entities), –Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –∏ –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
    """
    formatted_text = ""
    last_offset = 0

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ offset, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Ö –ø—Ä–∏–º–µ–Ω–∏—Ç—å
    for entity in sorted(entities, key=lambda e: e.offset):
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ –Ω–∞—á–∞–ª–∞ —Å—É—â–Ω–æ—Å—Ç–∏
        formatted_text += text[last_offset:entity.offset]

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å
        if entity.type == "bold":
            formatted_text += f"<b>{text[entity.offset:entity.offset + entity.length]}</b>"
        elif entity.type == "custom_emoji":
            formatted_text += f"<emoji id={entity.custom_emoji_id}>{text[entity.offset:entity.offset + entity.length]}</emoji>"
        else:
            # –ï—Å–ª–∏ —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
            formatted_text += text[entity.offset:entity.offset + entity.length]

        last_offset = entity.offset + entity.length

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—É—â–Ω–æ—Å—Ç–∏
    formatted_text += text[last_offset:]

    return formatted_text

@loader.module(author="sh1tn3t | shashachkaaa")
class EvaluatorMod(loader.Module):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç python-–∫–æ–¥"""

    async def exec_cmd(self, app: Client, message: types.Message, args: str):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å python-–∫–æ–¥"""
        return await self.execute(app, message, args)

    async def eval_cmd(self, app: Client, message: types.Message, args: str):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å python-–∫–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        return await self.execute(app, message, args, True)

    async def execute(
        self,
        app: Client,
        message: types.Message,
        args: str,
        return_it: bool = False
    ):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–¥"""
        try:
            result = html.escape(
                str(
                    await meval(args, globals(), **self.getattrs(app, message))
                )
            )
        except Exception:
            return await utils.answer(
                message, f"""<emoji id=5339181821135431228>üíª</emoji> <b>–ö–æ–¥:</b>
<code>{args}</code>

<emoji id=5210952531676504517>‚ùå</emoji> <b>–í—ã–≤–æ–¥:</b>
<code>{html.escape(traceback.format_exc())}</code>"""
            )

        if return_it:
            output = (f"""<emoji id=5339181821135431228>üíª</emoji> <b>–ö–æ–¥:</b>
<code>{args}</code>

<emoji id=5175061663237276437>üêç</emoji> <b>–í—ã–≤–æ–¥:</b>
<code>{result}</code>"""
            )
            outputs = [output[i: i + 4083] for i in range(0, len(output), 4083)]

            await utils.answer(message, f"{outputs[0]}</code>")
            for output in outputs[1:]:
                await message.reply(f"<code>{output}</code>")

    def getattrs(self, app: Client, message: types.Message):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞, –≤–∫–ª—é—á–∞—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
        """
        reply = message.reply_to_message
        if reply and reply.text:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º —Å—É—â–Ω–æ—Å—Ç–µ–π
            formatted_text = format_text_with_entities(reply.text, reply.entities)
            return {
                "self": self,
                "db": self.db,
                "app": app,
                "message": message,
                "chat": message.chat,
                "user": message.from_user,
                "reply": reply,
                "r": reply,
                "ruser": getattr(reply, "from_user", None),
                "rtext": formatted_text  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            }
        return {
            "self": self,
            "db": self.db,
            "app": app,
            "message": message,
            "chat": message.chat,
            "user": message.from_user,
            "reply": reply,
            "r": reply,
            "ruser": getattr(reply, "from_user", None)
        }