import subprocess
from pyrogram import Client, types
from .. import loader, utils


@loader.module(name="Terminal", author="shashachkaaa")
class TerminalMod(loader.Module):
    """–¢–µ—Ä–º–∏–Ω–∞–ª"""

    async def terminal_cmd(self, app: Client, message: types.Message, args: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥"""
        if not args:
            return await utils.answer(message, "‚ùå <b>–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å</b>")

        try:
            process = subprocess.Popen(args.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            output, error = process.communicate()

            result = (
                f"<emoji id=5339181821135431228>üíª</emoji> <b>–ö–æ–º–∞–Ω–¥–∞:</b>\n```bash\n{args}```\n\n"
                f"<emoji id=5395444784611480792>‚úèÔ∏è</emoji> <b>–í—ã–≤–æ–¥:</b>\n```bash\n{output.decode()}```"
            )

            if error:
                result += f"\n\n‚ùå <b>–û—à–∏–±–∫–∞:</b>\n```bash\n{error.decode()}```"

        except Exception as e:
            result = (
                f"<emoji id=5339181821135431228>üíª</emoji> <b>–ö–æ–º–∞–Ω–¥–∞:</b>\n```bash\n{args}```\n\n"
                f"<emoji id=5375360100196163660>üê≤</emoji> <b>–ò—Å–∫–ª—é—á–µ–Ω–∏–µ:</b>\n```bash\n{e}```"
            )

        await utils.answer(message, result)